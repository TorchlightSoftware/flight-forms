// Generated by CoffeeScript 1.6.3
(function() {
  define(["flight/component", "./formTemplate", "./validateField", "./notifyInline", "./util"], function(defineComponent, formTemplate, validateField, notifyInline, util) {
    var form;
    form = function() {
      this.defaultAttrs({
        name: util.random(),
        submit: "group",
        submitText: "Send",
        placement: "#content",
        fields: [],
        receiver: function() {}
      });
      return this.after("initialize", function() {
        var node, placement;
        this.$node.html(formTemplate(this.attr));
        this.$node.find(":input").filter(":visible:first").focus();
        placement = this.attr.placement;
        node = this.$node;
        this.attr.fields.forEach(function(field) {
          var linked, name, _i, _len, _ref,
            _this = this;
          if (!(field.required || field.validation)) {
            return;
          }
          name = field.name;
          console.log("adding validation to " + name);
          if (field.linked && getType(field.linked) === "Array") {
            _ref = field.linked;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              linked = _ref[_i];
              this.$node.find(".controls [name=" + linked + "]").change(function() {
                return _this.$node.find(".controls [name=" + name + "]").change();
              });
            }
          }
          return node.find(".controls [name=" + name + "]").change(function() {
            var error, val;
            val = $(this).val();
            console.log({
              field: field,
              val: val
            });
            error = validateField(field, val);
            return notifyInline(node, name, error);
          });
        });
        return this.$node.find("#" + this.attr.name).submit(function(evt) {
          var error, field, formParams, valid, _i, _len;
          evt.preventDefault();
          formParams = formToHash(this);
          valid = true;
          for (_i = 0, _len = validatedFields.length; _i < _len; _i++) {
            field = validatedFields[_i];
            error = validateField(field, formParams[field.name]);
            notifyInline(node, field.name, error);
            if (error) {
              valid = false;
            }
          }
          if (!valid) {
            return;
          }
          return receiver(formParams);
        });
      });
    };
    return defineComponent(form);
  });

}).call(this);
