// Generated by CoffeeScript 1.6.3
(function() {
  define(["./formTemplate", "./validateField", "./notifyInline", "./util"], function(formTemplate, validateField, notifyInline, _arg) {
    var formToHash, getType, random;
    random = _arg.random, getType = _arg.getType, formToHash = _arg.formToHash;
    return function(options) {
      var f, fields, receiver, validatedFields, _i, _len;
      if (options == null) {
        options = {};
      }
      receiver = options.receiver, fields = options.fields;
      console.log(fields);
      if (!(fields && fields.length > 0)) {
        console.log({
          message: "Called renderForm with no fields.",
          context: {
            fields: fields,
            options: options
          }
        });
        $(options.placement).html("Oops! There's no data for this form. The support team has been notified.");
        return;
      }
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        f = fields[_i];
        f.defaultValue || (f.defaultValue = "");
      }
      options.name || (options.name = random());
      options.submit || (options.submit = "group");
      options.submitText || (options.submitText = "Send");
      options.placement || (options.placement = "#content");
      $(options.placement).html(formTemplate({
        options: options,
        fields: fields
      }));
      $("#" + options.name).find(":input").filter(":visible:first").focus();
      validatedFields = fields.filter(function(f) {
        return f.required || f.validation;
      });
      validatedFields.map(function(field) {
        var linked, name, _j, _len1, _ref;
        name = field.name;
        if (field.linked && getType(field.linked) === "Array") {
          _ref = field.linked;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            linked = _ref[_j];
            $("" + options.placement + " .controls [name=" + linked + "]").change(function() {
              return $("" + options.placement + " .controls [name=" + name + "]").change();
            });
          }
        }
        return $("" + options.placement + " .controls [name=" + name + "]").change(function() {
          var error;
          error = validateField(field, $(this).val());
          return notifyInline(options.placement, name, error);
        });
      });
      return $("#" + options.name).submit(function(evt) {
        var error, field, formParams, valid, _j, _len1;
        evt.preventDefault();
        formParams = formToHash(this);
        valid = true;
        for (_j = 0, _len1 = validatedFields.length; _j < _len1; _j++) {
          field = validatedFields[_j];
          error = validateField(field, formParams[field.name]);
          notifyInline(options.placement, field.name, error);
          if (error) {
            valid = false;
          }
        }
        if (!valid) {
          return;
        }
        return receiver(formParams);
      });
    };
  });

}).call(this);
